package server

import (
	"context"
	"database/sql"
	"time"
)

func InitializeDB(ctx context.Context, db *sql.DB) error {
	// establish a bounded duration so DDL canâ€™t hang forever
	ctx, cancel := context.WithTimeout(ctx, 20*time.Second)
	defer cancel()

	// execute each DDL separately for clearer error reporting
	serverInfoTableSQL := `
		CREATE TABLE IF NOT EXISTS server_info_table (
			server_id           BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
			server_name         STRING(64),
			server_pubip        BYTES NOT NULL,
			server_port			INT NOT NULL CHECK (server_port BETWEEN 0 AND 65535)
			server_privip       BYTES NOT NULL UNIQUE,
			server_pubkey       BYTES NOT NULL UNIQUE,
			server_presharedkey BYTES NOT NULL
		);`

	userInfoTableSQL := `
		CREATE TABLE IF NOT EXISTS user_info_table (
			user_id        BIGINT  PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
			username       STRING(64)  NOT NULL UNIQUE,
			display_name   STRING(128) NOT NULL,
			last_seen      TIMESTAMPTZ,
			user_pubkey    BYTES   NOT NULL UNIQUE,
			invite_history TIMESTAMPTZ[],
			latest_ip      BYTES NOT NULL UNIQUE
		);`

	for _, q := range []string{serverInfoTableSQL, userInfoTableSQL} {
		if _, err := db.ExecContext(ctx, q); err != nil {
			return err
		}
	}
	return nil
}
